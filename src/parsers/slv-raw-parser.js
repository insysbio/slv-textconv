/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function(head, pairs) {
            return {
              //let mapResult = Object.assign(pairs, multyPairs)
              sourceFormat: 'SLV',
              content: {
                header: head,
                map: pairs
              }
            }
          },
      peg$c1 = function(k, v) {
          //console.log(k,v)
          //console.log("__________")
          return {
            key:k,
            rawValue:v
          }
        },
      peg$c2 = "DBSolve Optimum (new parser) 1 Jul 2006",
      peg$c3 = peg$literalExpectation("DBSolve Optimum (new parser) 1 Jul 2006", false),
      peg$c4 = "SLV",
      peg$c5 = peg$literalExpectation("SLV", false),
      peg$c6 = /^[0-9.*]/,
      peg$c7 = peg$classExpectation([["0", "9"], ".", "*"], false, false),
      peg$c8 = function(h1, sp1, h2) {
            return h1+sp1+h2[0]+h2[1].join('')
          },
      peg$c9 = "#",
      peg$c10 = peg$literalExpectation("#", false),
      peg$c11 = function(s) {
            //console.log("KEY: "+s.join(''))
            return s.join('')
          },
      peg$c12 = function(s) {
            //console.log("VALUE: "+s)
            if (s == undefined) {
              return '\r\n'
            }
            else {
              return s.join('')
            }
          },
      peg$c13 = "#dbs#",
      peg$c14 = peg$literalExpectation("#dbs#", false),
      peg$c15 = function(sp, v) {
            let result = ''
            if (sp !== null) {
              result = '\r\n'
            }
            //console.log("LINE: "+v.join(''))
            result += v.join('')+" "
            return result
          },
      peg$c16 = /^[&*'A-Za-z0-9\-<>_" "()+-.:[\]]/,
      peg$c17 = peg$classExpectation(["&", "*", "'", ["A", "Z"], ["a", "z"], ["0", "9"], "-", "<", ">", "_", "\"", " ", "\"", "(", ")", ["+", "."], ":", "[", "]"], false, false),
      peg$c18 = /^[\/'*A-Za-z0-9<>_" "(){}+-`!?,.:;[\]&\uFFFD%]/,
      peg$c19 = peg$classExpectation(["/", "'", "*", ["A", "Z"], ["a", "z"], ["0", "9"], "<", ">", "_", "\"", " ", "\"", "(", ")", "{", "}", ["+", "`"], "!", "?", ",", ".", ":", ";", "[", "]", "&", "\uFFFD", "%"], false, false),
      peg$c20 = /^[\r\n" "]/,
      peg$c21 = peg$classExpectation(["\r", "\n", "\"", " ", "\""], false, false),
      peg$c22 = "##",
      peg$c23 = peg$literalExpectation("##", false),
      peg$c24 = function(s) {
        //console.log(`sharp is ${s}`)
        return s.join('')
      },
      peg$c25 = " ",
      peg$c26 = peg$literalExpectation(" ", false),
      peg$c27 = "\r",
      peg$c28 = peg$literalExpectation("\r", false),
      peg$c29 = "\n",
      peg$c30 = peg$literalExpectation("\n", false),
      peg$c31 = function(s) {
        return s.join('')
      },
      peg$c32 = "Right Hand Sides &&",
      peg$c33 = peg$literalExpectation("Right Hand Sides &&", false),
      peg$c34 = "Initial Values &&",
      peg$c35 = peg$literalExpectation("Initial Values &&", false),
      peg$c36 = "Comments Or Selkov DB record",
      peg$c37 = peg$literalExpectation("Comments Or Selkov DB record", false),
      peg$c38 = "PIN->UserLaws",
      peg$c39 = peg$literalExpectation("PIN->UserLaws", false),
      peg$c40 = "<P Use User's mechanisms",
      peg$c41 = peg$literalExpectation("<P Use User's mechanisms", false),
      peg$c42 = "PON->UserLaws",
      peg$c43 = peg$literalExpectation("PON->UserLaws", false),
      peg$c44 = "TCN->UserLaws",
      peg$c45 = peg$literalExpectation("TCN->UserLaws", false),
      peg$c46 = "PATH->UserLaws",
      peg$c47 = peg$literalExpectation("PATH->UserLaws", false),
      peg$c48 = "<Total Cellular Process Names",
      peg$c49 = peg$literalExpectation("<Total Cellular Process Names", false),
      peg$c50 = "<Total Entity Names",
      peg$c51 = peg$literalExpectation("<Total Entity Names", false),
      peg$c52 = "<Index Link to metabolic",
      peg$c53 = peg$literalExpectation("<Index Link to metabolic", false),
      peg$c54 = "<Interaction Regulation GeneProductName",
      peg$c55 = peg$literalExpectation("<Interaction Regulation GeneProductName", false),
      peg$c56 = "<InteractionRegulation",
      peg$c57 = peg$literalExpectation("<InteractionRegulation", false),
      peg$c58 = "Interaction GeneProductName",
      peg$c59 = peg$literalExpectation("Interaction GeneProductName", false),
      peg$c60 = "InteractionNetwork",
      peg$c61 = peg$literalExpectation("InteractionNetwork", false),
      peg$c62 = "Gene Name Operon",
      peg$c63 = peg$literalExpectation("Gene Name Operon", false),
      peg$c64 = "Operon Structure",
      peg$c65 = peg$literalExpectation("Operon Structure", false),
      peg$c66 = "Metabolic Regulation CompoundName",
      peg$c67 = peg$literalExpectation("Metabolic Regulation CompoundName", false),
      peg$c68 = "MetabolicRegulation",
      peg$c69 = peg$literalExpectation("MetabolicRegulation", false),
      peg$c70 = "GeneticNetwork GeneProductName",
      peg$c71 = peg$literalExpectation("GeneticNetwork GeneProductName", false),
      peg$c72 = "Genetic Network",
      peg$c73 = peg$literalExpectation("Genetic Network", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseheader();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsekeyValuePars();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsekeyValuePars();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsespaces();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsespaces();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekeyValuePars() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsekey();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsevalue();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsevalue();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseheader() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 39) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 39;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespaces();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespaces();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c4) {
          s4 = peg$c4;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c6.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekeyPattern() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsebreak();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsebreak();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsekeySymbols();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsekeySymbols();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebreak();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 35) {
            s5 = peg$c9;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          peg$silentFails--;
          if (s5 !== peg$FAILED) {
            peg$currPos = s4;
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c11(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevalue() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsebreak();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsebreak();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c9;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parselineValue();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parselineValue();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parsekey();
          peg$silentFails--;
          if (s4 !== peg$FAILED) {
            peg$currPos = s3;
            s3 = void 0;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$currPos;
            s5 = [];
            s6 = peg$parsebreak();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsebreak();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 35) {
                s6 = peg$c9;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            peg$silentFails--;
            if (s4 !== peg$FAILED) {
              peg$currPos = s3;
              s3 = void 0;
            } else {
              s3 = peg$FAILED;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parsebreak();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parsebreak();
          }
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 35) {
              s7 = peg$c9;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parsebreak();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsebreak();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsekey();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 35) {
                s5 = peg$c9;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = [];
                s7 = peg$parsebreak();
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsebreak();
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  peg$silentFails++;
                  s8 = peg$parsevalue();
                  peg$silentFails--;
                  if (s8 === peg$FAILED) {
                    s7 = void 0;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
            }
          }
          peg$silentFails--;
          if (s5 !== peg$FAILED) {
            peg$currPos = s4;
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c12(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselineValue() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsekey();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebreak();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsevalueSymbols();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsevalueSymbols();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsebreak();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c13) {
              s5 = peg$c13;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = [];
            s4 = peg$parsesharps();
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsesharps();
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parsebreak();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                peg$silentFails++;
                s6 = peg$parselineValue();
                peg$silentFails--;
                if (s6 !== peg$FAILED) {
                  peg$currPos = s5;
                  s5 = void 0;
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = [];
          s6 = peg$parsebreak();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsebreak();
          }
          peg$silentFails--;
          if (s5 !== peg$FAILED) {
            peg$currPos = s4;
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c15(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekey() {
    var s0;

    s0 = peg$parsedictionaryKey();
    if (s0 === peg$FAILED) {
      s0 = peg$parsekeyPattern();
    }

    return s0;
  }

  function peg$parsekeySymbols() {
    var s0;

    if (peg$c16.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }

    return s0;
  }

  function peg$parsevalueSymbols() {
    var s0;

    if (peg$c18.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }

    return s0;
  }

  function peg$parsespaces() {
    var s0;

    if (peg$c20.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }

    return s0;
  }

  function peg$parsesharps() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (input.substr(peg$currPos, 2) === peg$c22) {
      s2 = peg$c22;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.substr(peg$currPos, 2) === peg$c22) {
          s2 = peg$c22;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c9;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebreak() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 32) {
      s2 = peg$c25;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 13) {
        s3 = peg$c27;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.charCodeAt(peg$currPos) === 13) {
            s3 = peg$c27;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s3 = peg$c29;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c30); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c31(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedictionaryKey() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsebreak();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsebreak();
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 19) === peg$c32) {
        s2 = peg$c32;
        peg$currPos += 19;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsebreak();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsebreak();
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 17) === peg$c34) {
            s4 = peg$c34;
            peg$currPos += 17;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsebreak();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsebreak();
            }
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 28) === peg$c36) {
                s6 = peg$c36;
                peg$currPos += 28;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c37); }
              }
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsebreak();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsebreak();
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c38) {
          s2 = peg$c38;
          peg$currPos += 13;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsebreak();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsebreak();
          }
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 24) === peg$c40) {
              s4 = peg$c40;
              peg$currPos += 24;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsebreak();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsebreak();
        }
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 13) === peg$c42) {
            s2 = peg$c42;
            peg$currPos += 13;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c43); }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parsebreak();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsebreak();
            }
            if (s3 !== peg$FAILED) {
              if (input.substr(peg$currPos, 24) === peg$c40) {
                s4 = peg$c40;
                peg$currPos += 24;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsebreak();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsebreak();
          }
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 13) === peg$c44) {
              s2 = peg$c44;
              peg$currPos += 13;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsebreak();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsebreak();
              }
              if (s3 !== peg$FAILED) {
                if (input.substr(peg$currPos, 24) === peg$c40) {
                  s4 = peg$c40;
                  peg$currPos += 24;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c41); }
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsebreak();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsebreak();
            }
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 14) === peg$c46) {
                s2 = peg$c46;
                peg$currPos += 14;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c47); }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsebreak();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsebreak();
                }
                if (s3 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 24) === peg$c40) {
                    s4 = peg$c40;
                    peg$currPos += 24;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c41); }
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parsebreak();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsebreak();
              }
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 29) === peg$c48) {
                  s2 = peg$c48;
                  peg$currPos += 29;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c49); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parsebreak();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsebreak();
                  }
                  if (s3 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 19) === peg$c50) {
                      s4 = peg$c50;
                      peg$currPos += 19;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c51); }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parsebreak();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parsebreak();
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 24) === peg$c52) {
                          s6 = peg$c52;
                          peg$currPos += 24;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c53); }
                        }
                        if (s6 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsebreak();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parsebreak();
                }
                if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 39) === peg$c54) {
                    s2 = peg$c54;
                    peg$currPos += 39;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c55); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsebreak();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parsebreak();
                    }
                    if (s3 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 22) === peg$c56) {
                        s4 = peg$c56;
                        peg$currPos += 22;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c57); }
                      }
                      if (s4 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parsebreak();
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsebreak();
                  }
                  if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 27) === peg$c58) {
                      s2 = peg$c58;
                      peg$currPos += 27;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c59); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parsebreak();
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsebreak();
                      }
                      if (s3 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 18) === peg$c60) {
                          s4 = peg$c60;
                          peg$currPos += 18;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c61); }
                        }
                        if (s4 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = [];
                    s2 = peg$parsebreak();
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      s2 = peg$parsebreak();
                    }
                    if (s1 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 16) === peg$c62) {
                        s2 = peg$c62;
                        peg$currPos += 16;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c63); }
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parsebreak();
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$parsebreak();
                        }
                        if (s3 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 16) === peg$c64) {
                            s4 = peg$c64;
                            peg$currPos += 16;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c65); }
                          }
                          if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = [];
                      s2 = peg$parsebreak();
                      while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$parsebreak();
                      }
                      if (s1 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 33) === peg$c66) {
                          s2 = peg$c66;
                          peg$currPos += 33;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c67); }
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = [];
                          s4 = peg$parsebreak();
                          while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parsebreak();
                          }
                          if (s3 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 19) === peg$c68) {
                              s4 = peg$c68;
                              peg$currPos += 19;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c69); }
                            }
                            if (s4 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = [];
                        s2 = peg$parsebreak();
                        while (s2 !== peg$FAILED) {
                          s1.push(s2);
                          s2 = peg$parsebreak();
                        }
                        if (s1 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 30) === peg$c70) {
                            s2 = peg$c70;
                            peg$currPos += 30;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c71); }
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = [];
                            s4 = peg$parsebreak();
                            while (s4 !== peg$FAILED) {
                              s3.push(s4);
                              s4 = peg$parsebreak();
                            }
                            if (s3 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 15) === peg$c72) {
                                s4 = peg$c72;
                                peg$currPos += 15;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c73); }
                              }
                              if (s4 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
